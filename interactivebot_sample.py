# -*- coding: utf-8 -*-
"""InteractiveBot Sample.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lI3_kIW4KTJe2CO8G4cnmvQWFBwNfZPt
"""

!pip install streamlit transformers streamlit-chat

import streamlit as st
from transformers import pipeline
from streamlit_chat import message

# Initialize Hugging Face QA pipeline (using a small DistilBERT model for demo)
qa_pipeline = pipeline("question-answering", model="distilbert-base-cased-distilled-squad")

# Define your quiz questions, options, correct answer index, and context for explanation
quiz = [
    {
        "question": "What is a settlement?",
        "options": [
            "The name for the first cities and urban centers, such as Athens.",
            "Walter Christaller's term for markets in his Central Place Theory.",
            "A colonial outpost of another country.",
            "A collection of high-order services.",
            "A permanent collection of buildings where people work and obtain services."
        ],
        "answer": 4,
        "context": (
            "A settlement is a permanent collection of buildings where people live, "
            "work, and obtain services. This can include cities, towns, or villages."
        ),
    },
    # You can add more questions here in the same format
    {
        "question": "What is Central Place Theory?",
        "options": [
            "A theory explaining the distribution of settlements and services.",
            "A geological theory about plate tectonics.",
            "An economic model for international trade.",
            "A concept about urban pollution.",
            "A climate classification system."
        ],
        "answer": 0,
        "context": (
            "Central Place Theory explains the size, number, and distribution of settlements "
            "and their market areas, focusing on services and trade."
        ),
    },
]

# Initialize session state for chat history and quiz progress
if "history" not in st.session_state:
    st.session_state.history = []
if "question_idx" not in st.session_state:
    st.session_state.question_idx = 0
if "quiz_over" not in st.session_state:
    st.session_state.quiz_over = False

def get_explanation(question, user_option, correct_option, context):
    if user_option == correct_option:
        return "‚úÖ Correct! Great job."
    else:
        # Use Hugging Face QA pipeline to generate explanation why user's answer is incorrect
        input_data = {
            "question": f"Why is '{user_option}' not the correct answer to: {question}?",
            "context": context,
        }
        try:
            result = qa_pipeline(input_data)
            explanation = result.get("answer", "")
            if len(explanation.strip()) == 0:
                explanation = "Please review the context for better understanding."
        except Exception as e:
            explanation = "Sorry, I couldn't generate an explanation this time."

        return (
            f"‚ùå Incorrect.\nExplanation: {explanation}\n\n"
            f"Reference info: {context}"
        )

def ask_question():
    q = quiz[st.session_state.question_idx]
    st.session_state.history.append(("bot", q["question"]))
    for i, option in enumerate(q["options"], start=1):
        st.session_state.history.append(("bot", f"{i}. {option}"))

def show_chat():
    for sender, msg in st.session_state.history:
        message(msg, is_user=(sender == "user"))

st.title("üß† Interactive Quiz Chatbot with Hugging Face")

if st.session_state.quiz_over:
    st.write("üéâ You've completed the quiz! Thanks for participating.")
else:
    if len(st.session_state.history) == 0:
        ask_question()

    show_chat()

    user_input = st.text_input("Enter the option number of your answer:")

    if user_input:
        st.session_state.history.append(("user", user_input))
        try:
            selected_idx = int(user_input.strip()) - 1
            current_q = quiz[st.session_state.question_idx]
            correct_idx = current_q["answer"]

            if selected_idx < 0 or selected_idx >= len(current_q["options"]):
                st.session_state.history.append(("bot", "‚ö†Ô∏è Please enter a valid option number."))
            else:
                user_option_text = current_q["options"][selected_idx]
                correct_option_text = current_q["options"][correct_idx]
                explanation = get_explanation(
                    current_q["question"], user_option_text, correct_option_text, current_q["context"]
                )
                st.session_state.history.append(("bot", explanation))

                st.session_state.question_idx += 1
                if st.session_state.question_idx >= len(quiz):
                    st.session_state.quiz_over = True
                else:
                    ask_question()

        except ValueError:
            st.session_state.history.append(("bot", "‚ö†Ô∏è Please enter a number corresponding to the option."))

        st.experimental_rerun()

